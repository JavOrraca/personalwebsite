<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dplyr on Javier&#39;s Data Site</title>
    <link>/categories/dplyr/</link>
    <description>Recent content in dplyr on Javier&#39;s Data Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/dplyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>dplyr&#39;s if_else vs base R&#39;s ifelse</title>
      <link>/blog/2019-04-03-dplyr-for-r/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/2019-04-03-dplyr-for-r/</guid>
      <description>When working with data sets of significant size, I&amp;rsquo;m always on the lookout for more efficient code (not necessarily fewer lines of code, but code that processes data faster and more effectively). Recently, I was getting antsy waiting for a simple if/else statement to run via R (I was working with a large GB-sized file on my personal computer). While waiting, I researched alternative approaches for performance improvement and found that dplyr, part of R&amp;rsquo;s Tidyverse and one of my favorite packages for data manipulation, has a vectorized if function perfect for the occasion.</description>
    </item>
    
  </channel>
</rss>